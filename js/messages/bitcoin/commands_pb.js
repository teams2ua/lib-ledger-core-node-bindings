/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bitcoin_account_pb = require('../bitcoin/account_pb.js');
goog.object.extend(proto, bitcoin_account_pb);
var bitcoin_account_config_pb = require('../bitcoin/account_config_pb.js');
goog.object.extend(proto, bitcoin_account_config_pb);
var bitcoin_wallet_pb = require('../bitcoin/wallet_pb.js');
goog.object.extend(proto, bitcoin_wallet_pb);
var bitcoin_operation_pb = require('../bitcoin/operation_pb.js');
goog.object.extend(proto, bitcoin_operation_pb);
var common_amount_pb = require('../common/amount_pb.js');
goog.object.extend(proto, common_amount_pb);
goog.exportSymbol('proto.ledger.core.message.bitcoin.CreateAccountRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.CreateAccountResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.CreateWalletRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.CreateWalletResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetAccountsRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetAccountsResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetBalanceRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetBalanceResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetOperationsRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetOperationsResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.GetWalletsResponse', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.Request', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.RequestType', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.SetAccountSettingsRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.SyncAccountRequest', null, global);
goog.exportSymbol('proto.ledger.core.message.bitcoin.SyncAccountResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ledger.core.message.bitcoin.GetWalletsResponse.repeatedFields_, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetWalletsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetWalletsResponse.displayName = 'proto.ledger.core.message.bitcoin.GetWalletsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.CreateWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.CreateWalletRequest.displayName = 'proto.ledger.core.message.bitcoin.CreateWalletRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.CreateWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.CreateWalletResponse.displayName = 'proto.ledger.core.message.bitcoin.CreateWalletResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetAccountsRequest.displayName = 'proto.ledger.core.message.bitcoin.GetAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ledger.core.message.bitcoin.GetAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetAccountsResponse.displayName = 'proto.ledger.core.message.bitcoin.GetAccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.CreateAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.CreateAccountRequest.displayName = 'proto.ledger.core.message.bitcoin.CreateAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.CreateAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.CreateAccountResponse.displayName = 'proto.ledger.core.message.bitcoin.CreateAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.SyncAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.SyncAccountRequest.displayName = 'proto.ledger.core.message.bitcoin.SyncAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.SyncAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.SyncAccountResponse.displayName = 'proto.ledger.core.message.bitcoin.SyncAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetBalanceRequest.displayName = 'proto.ledger.core.message.bitcoin.GetBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetBalanceResponse.displayName = 'proto.ledger.core.message.bitcoin.GetBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetOperationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetOperationsRequest.displayName = 'proto.ledger.core.message.bitcoin.GetOperationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ledger.core.message.bitcoin.GetOperationsResponse.repeatedFields_, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.GetOperationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.GetOperationsResponse.displayName = 'proto.ledger.core.message.bitcoin.GetOperationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.SetAccountSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.displayName = 'proto.ledger.core.message.bitcoin.SetAccountSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ledger.core.message.bitcoin.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ledger.core.message.bitcoin.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ledger.core.message.bitcoin.Request.displayName = 'proto.ledger.core.message.bitcoin.Request';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetWalletsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetWalletsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletsList: jspb.Message.toObjectList(msg.getWalletsList(),
    bitcoin_wallet_pb.Wallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetWalletsResponse}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetWalletsResponse;
  return proto.ledger.core.message.bitcoin.GetWalletsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetWalletsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetWalletsResponse}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_wallet_pb.Wallet;
      reader.readMessage(value,bitcoin_wallet_pb.Wallet.deserializeBinaryFromReader);
      msg.addWallets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetWalletsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetWalletsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      bitcoin_wallet_pb.Wallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Wallet wallets = 1;
 * @return {!Array<!proto.ledger.core.message.bitcoin.Wallet>}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.getWalletsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.Wallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, bitcoin_wallet_pb.Wallet, 1));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.Wallet>} value */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.setWalletsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.Wallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.Wallet}
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.addWallets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ledger.core.message.bitcoin.Wallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.GetWalletsResponse.prototype.clearWalletsList = function() {
  this.setWalletsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.CreateWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currencyName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.CreateWalletRequest}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.CreateWalletRequest;
  return proto.ledger.core.message.bitcoin.CreateWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.CreateWalletRequest}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.CreateWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrencyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency_name = 2;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.getCurrencyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.CreateWalletRequest.prototype.setCurrencyName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.CreateWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallet: (f = msg.getWallet()) && bitcoin_wallet_pb.Wallet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.CreateWalletResponse}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.CreateWalletResponse;
  return proto.ledger.core.message.bitcoin.CreateWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.CreateWalletResponse}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_wallet_pb.Wallet;
      reader.readMessage(value,bitcoin_wallet_pb.Wallet.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.CreateWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.CreateWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_wallet_pb.Wallet.serializeBinaryToWriter
    );
  }
};


/**
 * optional Wallet wallet = 1;
 * @return {?proto.ledger.core.message.bitcoin.Wallet}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.getWallet = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.Wallet} */ (
    jspb.Message.getWrapperField(this, bitcoin_wallet_pb.Wallet, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.Wallet|undefined} value */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.clearWallet = function() {
  this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.CreateWalletResponse.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetAccountsRequest}
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetAccountsRequest;
  return proto.ledger.core.message.bitcoin.GetAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetAccountsRequest}
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string wallet_uid = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.GetAccountsRequest.prototype.getWalletUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.GetAccountsRequest.prototype.setWalletUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    bitcoin_account_pb.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetAccountsResponse}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetAccountsResponse;
  return proto.ledger.core.message.bitcoin.GetAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetAccountsResponse}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.Account;
      reader.readMessage(value,bitcoin_account_pb.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      bitcoin_account_pb.Account.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account accounts = 1;
 * @return {!Array<!proto.ledger.core.message.bitcoin.Account>}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, bitcoin_account_pb.Account, 1));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.Account>} value */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.setAccountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.Account}
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ledger.core.message.bitcoin.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.GetAccountsResponse.prototype.clearAccountsList = function() {
  this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.CreateAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    xpub: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    config: (f = msg.getConfig()) && bitcoin_account_config_pb.AccountConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.CreateAccountRequest}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.CreateAccountRequest;
  return proto.ledger.core.message.bitcoin.CreateAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.CreateAccountRequest}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setXpub(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = new bitcoin_account_config_pb.AccountConfiguration;
      reader.readMessage(value,bitcoin_account_config_pb.AccountConfiguration.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.CreateAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXpub();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bitcoin_account_config_pb.AccountConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string xpub = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.getXpub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.setXpub = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AccountConfiguration config = 3;
 * @return {?proto.ledger.core.message.bitcoin.AccountConfiguration}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.getConfig = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountConfiguration} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_config_pb.AccountConfiguration, 3));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountConfiguration|undefined} value */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.CreateAccountRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.CreateAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAccount: (f = msg.getCreatedAccount()) && bitcoin_account_pb.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.CreateAccountResponse}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.CreateAccountResponse;
  return proto.ledger.core.message.bitcoin.CreateAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.CreateAccountResponse}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_account_pb.Account;
      reader.readMessage(value,bitcoin_account_pb.Account.deserializeBinaryFromReader);
      msg.setCreatedAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.CreateAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.CreateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bitcoin_account_pb.Account.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account created_account = 1;
 * @return {?proto.ledger.core.message.bitcoin.Account}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.getCreatedAccount = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.Account} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_pb.Account, 1));
};


/** @param {?proto.ledger.core.message.bitcoin.Account|undefined} value */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.setCreatedAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.clearCreatedAccount = function() {
  this.setCreatedAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.CreateAccountResponse.prototype.hasCreatedAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.SyncAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountRequest}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.SyncAccountRequest;
  return proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountRequest}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.SyncAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string acc_uid = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.getAccUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.SyncAccountRequest.prototype.setAccUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.SyncAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newAcc: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountResponse}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.SyncAccountResponse;
  return proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.SyncAccountResponse}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewAcc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.SyncAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.SyncAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewAcc();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool new_acc = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.getNewAcc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ledger.core.message.bitcoin.SyncAccountResponse.prototype.setNewAcc = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceRequest}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetBalanceRequest;
  return proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceRequest}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string acc_uid = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.getAccUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.GetBalanceRequest.prototype.setAccUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && common_amount_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceResponse}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetBalanceResponse;
  return proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetBalanceResponse}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_amount_pb.Amount;
      reader.readMessage(value,common_amount_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_amount_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional ledger.core.message.common.Amount amount = 1;
 * @return {?proto.ledger.core.message.common.Amount}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.getAmount = function() {
  return /** @type{?proto.ledger.core.message.common.Amount} */ (
    jspb.Message.getWrapperField(this, common_amount_pb.Amount, 1));
};


/** @param {?proto.ledger.core.message.common.Amount|undefined} value */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.GetBalanceResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetOperationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsRequest}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetOperationsRequest;
  return proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsRequest}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetOperationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string acc_uid = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.getAccUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.GetOperationsRequest.prototype.setAccUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.GetOperationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    bitcoin_operation_pb.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsResponse}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.GetOperationsResponse;
  return proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.GetOperationsResponse}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bitcoin_operation_pb.Operation;
      reader.readMessage(value,bitcoin_operation_pb.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.GetOperationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.GetOperationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      bitcoin_operation_pb.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Operation operations = 1;
 * @return {!Array<!proto.ledger.core.message.bitcoin.Operation>}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.ledger.core.message.bitcoin.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, bitcoin_operation_pb.Operation, 1));
};


/** @param {!Array<!proto.ledger.core.message.bitcoin.Operation>} value */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ledger.core.message.bitcoin.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ledger.core.message.bitcoin.Operation}
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ledger.core.message.bitcoin.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ledger.core.message.bitcoin.GetOperationsResponse.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.SetAccountSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settings: (f = msg.getSettings()) && bitcoin_account_config_pb.AccountSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.SetAccountSettingsRequest}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.SetAccountSettingsRequest;
  return proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.SetAccountSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.SetAccountSettingsRequest}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccUid(value);
      break;
    case 2:
      var value = new bitcoin_account_config_pb.AccountSettings;
      reader.readMessage(value,bitcoin_account_config_pb.AccountSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.SetAccountSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bitcoin_account_config_pb.AccountSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string acc_uid = 1;
 * @return {string}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.getAccUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.setAccUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AccountSettings settings = 2;
 * @return {?proto.ledger.core.message.bitcoin.AccountSettings}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.getSettings = function() {
  return /** @type{?proto.ledger.core.message.bitcoin.AccountSettings} */ (
    jspb.Message.getWrapperField(this, bitcoin_account_config_pb.AccountSettings, 2));
};


/** @param {?proto.ledger.core.message.bitcoin.AccountSettings|undefined} value */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ledger.core.message.bitcoin.SetAccountSettingsRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ledger.core.message.bitcoin.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.ledger.core.message.bitcoin.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ledger.core.message.bitcoin.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    submessage: msg.getSubmessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ledger.core.message.bitcoin.Request}
 */
proto.ledger.core.message.bitcoin.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ledger.core.message.bitcoin.Request;
  return proto.ledger.core.message.bitcoin.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ledger.core.message.bitcoin.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ledger.core.message.bitcoin.Request}
 */
proto.ledger.core.message.bitcoin.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ledger.core.message.bitcoin.RequestType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ledger.core.message.bitcoin.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ledger.core.message.bitcoin.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ledger.core.message.bitcoin.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSubmessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional RequestType type = 1;
 * @return {!proto.ledger.core.message.bitcoin.RequestType}
 */
proto.ledger.core.message.bitcoin.Request.prototype.getType = function() {
  return /** @type {!proto.ledger.core.message.bitcoin.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ledger.core.message.bitcoin.RequestType} value */
proto.ledger.core.message.bitcoin.Request.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes submessage = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ledger.core.message.bitcoin.Request.prototype.getSubmessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes submessage = 2;
 * This is a type-conversion wrapper around `getSubmessage()`
 * @return {string}
 */
proto.ledger.core.message.bitcoin.Request.prototype.getSubmessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubmessage()));
};


/**
 * optional bytes submessage = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubmessage()`
 * @return {!Uint8Array}
 */
proto.ledger.core.message.bitcoin.Request.prototype.getSubmessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubmessage()));
};


/** @param {!(string|Uint8Array)} value */
proto.ledger.core.message.bitcoin.Request.prototype.setSubmessage = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ledger.core.message.bitcoin.RequestType = {
  SET_ACCOUNT_SETTINGS: 0,
  SET_WALLET_SETTINGS: 1,
  SET_CURRENCY_SETTINGS: 2,
  GET_WALLETS: 3,
  CREATE_WALLET: 4,
  GET_ACCOUNTS: 5,
  CREATE_ACCOUNT: 6,
  SYNC_ACCOUNT: 7,
  GET_ACCOUNT_BALANCE: 8,
  GET_OPERATIONS: 9
};

goog.object.extend(exports, proto.ledger.core.message.bitcoin);
